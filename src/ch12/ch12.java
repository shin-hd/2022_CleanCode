package ch12;

/*
 * ch12. 창발성
 *
 * # 창발적 설계로 깔끔한 코드를 구현하자
 * 단순한 설계 규칙 네 가지
 * - 모든 테스트를 실행한다
 * - 중복을 없앤다
 * - 프로그래머 의도를 표현한다
 * - 클래스와 메소드 수를 최소로 줄인다
 *
 * # 단순한 설계 규칙 1: 모든 테스트를 실행하라
 * 시스템이 의도한 대로 돌아가는지 검증할 방법 : 테스트
 * 테스트가 가능한 시스템을 만들려고 하면 설계 품질도 올라감
 * 결합도가 높으면 테스트케이스 작성이 힘듦 => DIP, DI, 인터페이스, 추상화 등으로 결합도 낮추기
 * 
 * 테스트 케이스 만들고 실행하는 규칙만 따르면
 * 낮은 결합도 + 높은 응집력으로 설계 품질 상승
 *
 * # 단순한 설계 규칙 2~4: 리팩터링
 * 코드를 추가할 때마다 설계를 조감하고 정리
 * 테스트 케이스 덕분에 코드 정리는 시스템을 깨뜨리지 않음
 * 응집도 높임, 결합도 낮춤, 좋은 이름 선택 등
 * 중복 제거, 의도 표현, 클레스와 메소드 수 최소화
 * 
 * # 중복을 없애라
 * 중복 : 똑같은 코드 또는 구현 중복
 * 소규모 재사용 -> 시스템 복잡도를 낮춤
 *
 * TEMPLATE METHOD 패턴
 * 고차원 중복을 제거할 목적으로 자주 사용
 * 중복되는 부분만 오버라이드
 *
 * # 표현하라
 * 1. 좋은 이름 선택
 * 2. 함수와 클래스 크기 최소화
 * 3. 표준 명칭 사용
 * 4. 단위 테스트 케이스를 꼼꼼히 작성
 * 표현력을 높이기 위해 '노력'해야함
 * 
 * # 클래스와 메소드 수를 최소로 줄여라
 * 클래스, 메소드 크기를 줄이려고 무작정 많이 만들면 안됨
 * 목표 = 함수, 클래스 크기를 작게 유지 + 시스템 크기를 작게 유지
 * 
 * 우선순위
 * 테스트 케이스 만들기 > 중복 제거, 의도 표현 > 클래스, 메소드 크기 작게
 */

public class ch12 {
}
