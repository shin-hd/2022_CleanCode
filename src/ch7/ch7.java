package ch7;

/*
 * ch7. 오류 처리
 * 오류를 처리하는 기법과 고려사항
 *
 * # 오류 코드보다 예외를 사용하라
 * 오류 코드를 사용하면
 * - 호출자가 호출하자마자 오류를 확인해야 해서 호출자 코드가 복잡해짐
 * 예외를 사용하면
 * - 호출자 코드가 깔끔해짐
 * - 오류 처리 알고리즘을 분리해서 코드 품질이 향상됨
 *
 * # Try-Catch-Finally 문부터 작성하라
 * try 블록에서 무슨 일이 생기든 호출자가 기대하는 상태를 정의하기 쉬워짐
 *
 * # 미확인 예외를 사용하라
 * 확인된 예외의 코스트
 * - OpenClosedPrinciple을 위반
 *   하위 단계 코드를 변경하면 상위 단계 메소드 선언부 전부 고쳐야 함
 *
 * # 예외에 의미를 제공하라
 * 예외를 던질 때 전후상황을 충분히 덧붙여야
 * 오류 발생 원인과 위치를 찾기 쉬워짐
 *
 * # 호출자를 고려해 예외 클래스를 정의하라
 * 오류 분류 방법
 * - 발생 위치
 * - 발생 컴포넌트
 * - 발생 유형
 *
 * 오류의 중요 괌심사 : 오류를 잡아내는 방법
 *
 * 오류 처리 방식
 * 1) 오류 기록
 * 2) 프로그램을 계속 수행할지 확인
 *
 * 처리 방식이 비슷하다면 유형 하나로 통일
 * 
 * 외부 API를 wrapper 클래스로 감싸면 의존성이 줄어들고 라이브러리 교체비용이 감소
 *
 * # 정상 흐름을 정의하라
 * try-catch가 적합하지 않은 경우
 * ex) 청구 o -> 식비 총계 + 청구비
 *     청구 x -> 식비 총계 + 기본 식비
 *  특수 사례 패턴
 * 클래스를 만들거나 객체를 조작해 특수 사례를 처리하면
 * 클라이언트 코드가 예외적인 상황을 처리할 필요가 없음
 *
 * # null을 반환하지 마라
 * null을 확린해야해서 일이 늘고 확인하지 않으면 통제불능에 빠짐
 * 대신 특수 사례 객체 사용
 * ex) 빈 리스트
 *
 * # null을 전달하지 마라
 * 대다수 언어는 전달받은 null을 적절히 처리하는 방법이 없음
 * 애초에 null을 넘기지 못하도록 금지하도록
 *
 * # 결론
 * 오류 처리 - 프로그램 논리 분리
 *
 *
 */
public class ch7 {
}
