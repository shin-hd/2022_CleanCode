package ch5;

/*
 * ch5. 형식 맞추기
 *
 * # 형식을 맞추는 목적
 * 코드의 가독성은 장기적 코드 품질에 영향!
 * 시간이 지나도 처음 잡아놓은 형식은 계속 영향을 미침
 *
 * # 적절한 행 길이를 유지하라
 * 큰 파일보다 작은 파일이 이해하기 쉬움
 * 작은 파일로도 큰 시스템을 구축할 수 있음
 * 
 * # 신문 기사처럼 작성하라
 * 이름만 보고 모듈을 판단할 수 있도록 짓기
 * 파일 첫 부분에서 개념과 알고리즘 설명
 * 아래로 갈수록 세세하게 묘사
 * 마지막은 저차원 함수와 세부 내역
 *
 * # 개념은 빈 행으로 분리하라
 * 좌 -> 우, 상 -> 하
 * 행의 묶음 : 생각 하나를 표현
 * 각 생각은 빈 행으로 구분해야 함
 * 빈 행은 새로운 개념의 시작을 의미
 *
 * # 세로 밀집도
 * 연관성을 의미
 * 밀집한 코드 행은 가까이
 *
 * # 수직 거리
 * 밀집한 개념은 세로로 가까이
 * 서로 밀집한 개념은 한 파일에 속해야 함
 * protected 변수를 피해야 하는 이유
 *
 * - 변수 선언
 *  사용하는 위치에 최대한 가까이 선언
 *  루프 제어 변수는 루프문 내부에 선언
 * - 인스턴스 변수
 *  클래스 맨 처음
 *  세로 거리 두지 않음
 * - 종속 함수
 *  한 함수가 다른 함수를 호출하는 관계라면 세로로 가까이 배치
 *  호출하는 함수를 호출된 함수보다 먼저 배치
 * - 개념적 유사성
 *  개념적 친화도가 높을수록 가까이 배치
 *  친화도 요인 : 종속성, 변수-사용함수, 유사한 함수군 등
 * 
 * # 세로 순서
 * 호출 종속성은 아래 방향으로 유지
 * (호출하는 함수 -> 호출되는 함수) (C는 반대. 선언해야 쓸 수 있으니까)
 * 중요 개념 먼저, 세세한 사항은 뒤에
 *
 * # 가로 형식 맞추기
 * 프로그래머는 짧은 행 선호
 * 길어도 120자를 안넘기도록
 *
 * # 가로 공백과 밀집도
 * 가로 공백으로 밀집한/느슨한 개념을 표현
 * 연산의 우선순위(*, +) 표현
 *
 * # 가로 정렬
 * 나란히 정렬 X
 * 코드의 엉뚱한 부분을 강조해서 진짜 의도가 가려짐
 * 정렬이 필요하다면 코드가 길다는 의미로 클래스를 쪼개야 함
 *
 * # 들여쓰기
 * 범위(Scope)로 이루어진 계층을 표현
 * - 들여쓰기 무시하기
 *  짧은 if, while에도 들여쓰기 무시하지 마라
 *
 * # 가짜 범위
 * 빈 while, for 문에는 세미클론은 새 행에다가
 * ex) while (dis.read() != -1);    X
 *     while (dis.read() != -1)
 *     ;                            O
 *
 * # 팀 규칙
 * 팀 소속이라면 팀 규칙이 최우선
 * 스타일은 일관적이고 매끄러워야 하기 때문에
 * 다른 스타일이 공존하면 X
 *
 */
public class ch5 {
}
