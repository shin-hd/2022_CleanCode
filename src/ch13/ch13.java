package ch13;

/*
 * ch13. 동시성
 * 스레드를 동시에 돌리는 이유, 어려움
 * 동시성 테슽트 방법 및 문제점
 *
 * # 동시성이 필요한 이유?
 * 동시성 : 결합을 없애는 전략, 무엇과 언제를 분리하는 전략
 * 구조적 개선, 성능 향상, 다중 사용자 동시 처리, 병렬 처리 등등
 *
 * 미신과 오해
 * - 동시성은 항상 성능을 높여준다?
 *  대기시간이 길어 여러 스레드가 프로세서를 공유할 수 있거나
 *  여러 프로세스가 동시에 처리할 독립적 계산이 충분히 많은 경우에만 성능 향상
 * - 동시성을 구현해도 설계는 변하지 않는다?
 *  단일 스레드 시스템, 다중 스레드 시스템은 설계가 다름
 * - 웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다?
 *  실제 컨테이너 동작, 동시수정과 데드락을 어떻게 피하는지 알아야 함
 *
 * - 동시성은 다소 부하를 유발한다!
 *  성능 부하, 코드 추가 필요
 * - 동시성은 복잡하다!
 *  간단한 문제라도 동시성은 복잡함
 * - 일반적으로 동시성 버그는 제현하기 어렵다!
 *  그래서 일회성 문제로 여겨 무시되기 십상
 * - 동시성을 구현하려면 흔히 근본적인 설계 전략을 재고해야 한다!
 *
 * # 난관
 * 농시성을 구현하기 어려운 이유
 * 두 스레드가 잘못된 결과를 내놓을 수 있는 '일부' 경로
 *
 * # 동시성 방어 원칙
 * 동시성 코드가 일으키는 문제로부터 시스템을 방어하는 원칙과 기술
 *
 * - 단일 책임 원칙 (SRP)
 *  메소드/클래스/컴포넌트를 변경할 이유가 하나여야 한다는 원칙
 *  동시성 코드는 다른 코드와 분리해야 함
 *   동시성 코드는 독자적 개발, 변경, 조율 주기가 있다
 *   동시성 코드에는 독자걱 난관이 있으며 다른 코드의 난관과 다르고 어렵다
 *   잘못 구현된 동시성 코드는 여러 방식으로 실패한다
 *  !권장사항! 동시성 코드는 다른 코드와 분리
 *
 * - 따름 정리: 자료 범위를 제한하라
 *  공유객체를 사용하는 임계영역을 synchronized로 보호
 *  공유 자료 수정 위치가 많으면
 *   보호할 임계영역을 빼먹어서 모든 코드를 망가뜨림
 *   모든 임계영역을 확인하느라 노력과 수고를 반복
 *   찾기 어려운 버그가 더 찾기 어려워짐
 *  !권장사항! 자료를 캡슐화, 공유 자료 최소화
 *
 * - 따름 정리: 자료 사본을 사용하라
 *  공유 자료를 줄이려면 처음부터 공유하지 않는 방법이 제일
 *  객체를 복사해 읽기 전용으로 사용
 *  각 스레드가 객체를 복사해 사용하고 사본에서 결과를 가져오는 방법
 *  복사 시간 + 부하가 걱정된다면, 실측해볼 필요가 있다
 *  복사 부하 vs 내부 잠금 없앤 수행 시간
 *
 * - 따름 정리: 스레드는 가능한 독립적으로 구현하라
 *  다른 스레드와 자료를 공유하지 않으면 동기화할 필요가 없다
 *  !권장사항! 독자적인 스레드로, 가능하면 다른 프로세서에서,
 *            돌려도 괜찮도록 자료를 독립적인 단위로 분할하라
 *
 * # 라이브러리를 이해하라
 * 스레드 환경에 안전한 컬렉션 사용
 * 서로 무관한 작업 수행 시 executor 프레임워크 사용
 * 가능하면 스레드가 차단되지 않는 방법 사용
 * 일부 클래스 라이브러리는 스레드 안전하지 않음
 *
 * - 스레드 환경에서 안전한 컬렉션
 *  java.util.concurrent 패키지가 제공하는 클래스는 다중 스레드 환경에서 사용해도 안전
 *  ConcurrentHashMap, ReentrantLock, Semaphore, CountDownLatch
 *  !권장사항! 언어가 제공하는 클래스 검토. concurrent.atomic, concurrent.locks
 * 
 * # 실행 모델을 이해하라
 * 한정된 자원
 * 상호 배제(Mutual Exclusion)
 * 기아(Starvation)
 * 데드락
 * 라이브락: 락 거는 단계에서 스레드가 서로를 방해, 공명으로 진행불가
 * 
 * 다중 스레드 프로그래밍 실행 모델
 * - 생산자-소비자
 *  대기열은 한정 자원
 *  생산자 스레드가 정보를 생산해서 버퍼/큐에 넣음
 *  생산자는 빈 공간이 생길 때까지 기다림
 *  생산자는 대기열 채우고 정보 있음 시그널
 *  소비자 스레드가 정보를 가져와 사용
 *  소비자는 정보가 채워질 때까지 기다림
 *  소비자는 정보 빼고 대기열에 공간 있음 시그널
 *  => 동시에 시그널을 기다릴 가능성
 * - 읽기-쓰기
 *  읽기 스레드가 공유 자원 사용
 *  쓰기 스레드가 공유 자원을 종종 갱신
 *  => 처리율이 핵심
 *  처리율을 강조하면 기아 현상 or 오래된 정보가 쌓임
 *  갱신을 허용하면 처리율에 영향
 *  대개 쓰기 스레드가 오래 점유해서 읽기 스레드들이 기다리느라 처리율 떨어짐
 *  읽기와 쓰기 양쪽 균형을 잡으멶서 동시 갱신 문제를 피하는 해법 필요
 * - 식사하는 철학자들
 *  대다수 다중 스레드 문제
 *  데드락, 라이브락, 처리율저하, 효율성저하
 *  !권장사항! 기본 알고리즘과 각 해법 이해
 * 
 * # 동기화하는 메소드 사이에 존재하는 의존성을 이해하라
 * 동기화 메소드 사이에 의존성이 존재하면 찾아내기 어려운 버그 발생
 * 자바는 synchronized를 지원하지만, 공유 클래스 하나에 동기화 메소드 여럿이라면 다시 한번 확인
 * !권장사항! 공유 객체 하나에는 메소드 하나만 사용하라
 *
 * 공유 객체 하나에 여러 메소드가 필요할 때 고려사항
 * - 클라이언트에서 잠금
 *  클라이언트에서 첫 번째 메소드를 호출하기 전에 서버를 잠금
 *  마지막 메소드를 호출할 때까지 잠금 유지
 * - 서버에서 잠금
 *  서버에서 "서버를 잠그고 모든 메소드를 호출한 다음 잠금 해제" 메소드 구현
 *  클라이언트가 이 메소드 호출
 * - 연결 서버
 *  잠금을 수행하는 중간 단계 생성
 *  서버에서 잠금과 유사하지만 원래 서버는 변경 x
 *
 * # 동기화하는 부분을 작게 만들어라
 * synchronized 키워드로 락 설정
 * 락은 스레드를 지연시키고 부하 가중
 * => synchronized 키워드 남발 금지
 *
 * 임계영역은 반드시 보호받아야 함
 * => 임계영역 수 최소화
 *
 * 임계영역을 줄이려고 거대한 하나로 구현하는 것은 미련한 일
 *
 * !권장사항! 동기화하는 부분을 최대한 작게 만들어라
 *
 * # 올바른 종료 코드는 구현하기 어렵다
 * 영구적으로 돌아가는 시스템을 구현하는 방법
 * != 잠시 돌다 깔끔하게 종료하는 시스템을 구현하는 방법
 * 
 * 깔끔하게 종료하는 코드는 구현하기 어려움
 * 왜? 데드락. 시그널을 계속 기다림
 * ex) 생산자 다 종료, 소비자 자원 대기
 * 
 * !권장사항! 종료 코드를 개발 초기부더 고민, 동작 초기부터 구현. 이미 나온 알고리즘 검토
 *
 * # 스레드 코드 테스트하기
 * 코드가 올바름을 증명하는 것은 현실적으로 불가능
 * but 충분한 테스트는 위험을 낮춤
 * 스레드가 늘어나면 급격히 복잡해짐
 * 
 * !권장사항!
 * 문제를 노출하는 테스트 케이스 작성.
 * 프로그램 설정과 시스템 설정과 부하를 바꿔가며 자주 돌림.
 * 실패 원인 추적. 다시하면 통과하더라도 넘어가면 안됨
 *
 * 구체적 지침
 * - 말이 안되는 실패는 잠정적인 스레드 문제로 취급하라
 *  스레드 코드 버그는 재현이 어려워 종종 '일회성' 문제로 치부되고 무시됨
 *  '일회성' 문제를 무시하면 잘못된 코드 위에 코드가 계속 쌓임
 *  !권장사항! 시스템 실패를 '일회성'이라 치부하지 마라
 * - 다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자
 *  스레드가 호출하는, 스레드를 모르는 POJO를 먼저 스레드 환경 밖에서 테스트
 *  !권장사항! 스레드 환경 밖 버그와 스레드 환경 버그를 동시에 디버깅하지 마라
 * - 다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라
 *  한 스레드로 실행, 여러 스레드로 실행, 실행 중 스데르 수 바꾸기
 *  실제 환경이나 테스트 환경에서 돌려보기
 *  테스트 코드를 빨리, 천천히, 다양하게 돌려보기
 *  반복 테스트가 가능하도록 테스트케이스 작성
 *  !권장사항! 다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워넣을 수 있게 코드를 구현한다
 * - 다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정할 수 있게 작성하라
 *  적절 스레드 수를 파악하려면 상당한 시행착오가 필요
 *  처음부터 스레드 개수를 조율하기 쉽게 구현
 *  프로그램 실행 도중 스레드 수를 변경하는 방법도 고려
 * - 프로세서 수보다 많은 스레드를 돌려보라
 *  스레드 스와핑 때도 문제 발생
 *  프로세서 수보다 많은 스레드를 돌리면 스와핑 발생
 *  스와핑이 잦으면 임계영역을 빼먹은 코드, 데드락 코드를 찾기 쉬워짐
 * - 다른 플랫폼에서 돌려보라
 *  똑같이 문제가 있는 코드라도, 운영체제 스레드 정책마다 결과가 달라짐
 *  !권장사항! 처음부터, 자주 모든 목표 플랫폼에서 코드를 돌려라
 * - 코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해봐라
 *  스레드 버그는 산발적, 우발적, 재현이 어려움
 *  실행되는 경로 중 극소수만 실패
 *  보조 코드로 코드 실행 순서를 바꾸면 오류를 좀 더 자주 발생하게
 *  잘못된 코드라면 빨리, 자주 실패하는 것이 좋음
 *  코드에 보조 코드를 추가하는 방법 두 가지
 *   = 직접 구현하기
 *    코드에 직접 wait, sleep, yield, priority 추가
 *    특별히 까다로운 코드를 테스트할 때 적합
 *   = 자동화
 *    AOF, CGLIB, ASM 등 도구를 사영해서 보조 코드를 자동으로 추가
 *    코드를 흔드는 이유는 스레드를 매번 다른 순서로 실행하기 위함
 *    !권장사항! 흔들기 기법을 사용해 오류를 찾아내라
 * 
 * # 결론
 * 다중 스레드 코드를 작성한다면 각별히 주의
 * SRP 준수, POJO로 코드 분리
 * 동시성 오류의 잠정적 원인 이해
 * 라이브러리, 기본 알고리즘 이해
 * 보호 코드 영역을 찾는 방법, 특정 코드 잠그는 방법 이해
 * 문제를 무시하지 말고 반복 테스트
 * 보조 코드 직접 구현 or 자동화
 * 
 */

public class ch13 {
}
